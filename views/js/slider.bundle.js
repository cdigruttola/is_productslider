!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="public",n(n.s=10)}([function(t,e,n){"use strict";
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */var o=".js-form-submit-btn",i=window.$,r=function(){i(document).on("click",o,(function(t){t.preventDefault();var e=i(t.target);if(!e.data("form-confirm-message")||!1!==window.confirm(e.data("form-confirm-message"))){var n="POST",o=null;if(e.data("method")){var r=e.data("method"),a=["GET","POST"].includes(r);n=a?r:"POST",a||(o=i("<input>",{type:"_hidden",name:"_method",value:r}))}var s=i("<form>",{action:e.data("form-submit-url"),method:n});o&&s.append(o),e.data("form-csrf-token")&&s.append(i("<input>",{type:"_hidden",name:"_csrf_token",value:e.data("form-csrf-token")})),s.appendTo("body").submit()}}))};
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */e.a=r},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},,,function(t,e,n){"use strict";(function(t){var n=function(){if("undefined"!=typeof Map)return Map;function t(t,e){var n=-1;return t.some((function(t,o){return t[0]===e&&(n=o,!0)})),n}return function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var n=t(this.__entries__,e),o=this.__entries__[n];return o&&o[1]},e.prototype.set=function(e,n){var o=t(this.__entries__,e);~o?this.__entries__[o][1]=n:this.__entries__.push([e,n])},e.prototype.delete=function(e){var n=this.__entries__,o=t(n,e);~o&&n.splice(o,1)},e.prototype.has=function(e){return!!~t(this.__entries__,e)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var n=0,o=this.__entries__;n<o.length;n++){var i=o[n];t.call(e,i[1],i[0])}},e}()}(),o="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==t&&t.Math===Math?t:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),r="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(t){return setTimeout((function(){return t(Date.now())}),1e3/60)};var a=["top","right","bottom","left","width","height","size","weight"],s="undefined"!=typeof MutationObserver,l=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(t,e){var n=!1,o=!1,i=0;function a(){n&&(n=!1,t()),o&&l()}function s(){r(a)}function l(){var t=Date.now();if(n){if(t-i<2)return;o=!0}else n=!0,o=!1,setTimeout(s,e);i=t}return l}(this.refresh.bind(this),20)}return t.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},t.prototype.removeObserver=function(t){var e=this.observers_,n=e.indexOf(t);~n&&e.splice(n,1),!e.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},t.prototype.updateObservers_=function(){var t=this.observers_.filter((function(t){return t.gatherActive(),t.hasActive()}));return t.forEach((function(t){return t.broadcastActive()})),t.length>0},t.prototype.connect_=function(){o&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),s?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){o&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(t){var e=t.propertyName,n=void 0===e?"":e;a.some((function(t){return!!~n.indexOf(t)}))&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),c=function(t,e){for(var n=0,o=Object.keys(e);n<o.length;n++){var i=o[n];Object.defineProperty(t,i,{value:e[i],enumerable:!1,writable:!1,configurable:!0})}return t},d=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||i},u=g(0,0,0,0);function h(t){return parseFloat(t)||0}function f(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.reduce((function(e,n){return e+h(t["border-"+n+"-width"])}),0)}function p(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return u;var o=d(t).getComputedStyle(t),i=function(t){for(var e={},n=0,o=["top","right","bottom","left"];n<o.length;n++){var i=o[n],r=t["padding-"+i];e[i]=h(r)}return e}(o),r=i.left+i.right,a=i.top+i.bottom,s=h(o.width),l=h(o.height);if("border-box"===o.boxSizing&&(Math.round(s+r)!==e&&(s-=f(o,"left","right")+r),Math.round(l+a)!==n&&(l-=f(o,"top","bottom")+a)),!function(t){return t===d(t).document.documentElement}(t)){var c=Math.round(s+r)-e,p=Math.round(l+a)-n;1!==Math.abs(c)&&(s-=c),1!==Math.abs(p)&&(l-=p)}return g(i.left,i.top,s,l)}var m="undefined"!=typeof SVGGraphicsElement?function(t){return t instanceof d(t).SVGGraphicsElement}:function(t){return t instanceof d(t).SVGElement&&"function"==typeof t.getBBox};function b(t){return o?m(t)?function(t){var e=t.getBBox();return g(0,0,e.width,e.height)}(t):p(t):u}function g(t,e,n,o){return{x:t,y:e,width:n,height:o}}var v=function(){function t(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=g(0,0,0,0),this.target=t}return t.prototype.isActive=function(){var t=b(this.target);return this.contentRect_=t,t.width!==this.broadcastWidth||t.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},t}(),y=function(t,e){var n,o,i,r,a,s,l,d=(o=(n=e).x,i=n.y,r=n.width,a=n.height,s="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,l=Object.create(s.prototype),c(l,{x:o,y:i,width:r,height:a,top:i,right:o+r,bottom:a+i,left:o}),l);c(this,{target:t,contentRect:d})},w=function(){function t(t,e,o){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof t)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=t,this.controller_=e,this.callbackCtx_=o}return t.prototype.observe=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof d(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)||(e.set(t,new v(t)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof d(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var t=this;this.clearActive(),this.observations_.forEach((function(e){e.isActive()&&t.activeObservations_.push(e)}))},t.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map((function(t){return new y(t.target,t.broadcastRect())}));this.callback_.call(t,e,t),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),D="undefined"!=typeof WeakMap?new WeakMap:new n,_=function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=l.getInstance(),o=new w(e,n,this);D.set(this,o)};["observe","unobserve","disconnect"].forEach((function(t){_.prototype[t]=function(){var e;return(e=D.get(this))[t].apply(e,arguments)}}));var C=void 0!==i.ResizeObserver?i.ResizeObserver:_;e.a=C}).call(this,n(1))},,function(t,e){var n,o,i,r,a,s;n=jQuery,o=window,i=window.document,r="touchstart mousedown",a="touchmove mousemove",s="touchend mouseup",n(i).ready((function(){function t(t){for(var e={},n=t.match(/([^;:]+)/g)||[];n.length;)e[n.shift()]=n.shift().trim();return e}n("table").each((function(){"dnd"===n(this).data("table")&&n(this).tableDnD({onDragStyle:n(this).data("ondragstyle")&&t(n(this).data("ondragstyle"))||null,onDropStyle:n(this).data("ondropstyle")&&t(n(this).data("ondropstyle"))||null,onDragClass:void 0===n(this).data("ondragclass")?"tDnD_whileDrag":n(this).data("ondragclass"),onDrop:n(this).data("ondrop")&&new Function("table","row",n(this).data("ondrop")),onDragStart:n(this).data("ondragstart")&&new Function("table","row",n(this).data("ondragstart")),onDragStop:n(this).data("ondragstop")&&new Function("table","row",n(this).data("ondragstop")),scrollAmount:n(this).data("scrollamount")||5,sensitivity:n(this).data("sensitivity")||10,hierarchyLevel:n(this).data("hierarchylevel")||0,indentArtifact:n(this).data("indentartifact")||'<div class="indent">&nbsp;</div>',autoWidthAdjust:n(this).data("autowidthadjust")||!0,autoCleanRelations:n(this).data("autocleanrelations")||!0,jsonPretifySeparator:n(this).data("jsonpretifyseparator")||"\t",serializeRegexp:n(this).data("serializeregexp")&&new RegExp(n(this).data("serializeregexp"))||/[^\-]*$/,serializeParamName:n(this).data("serializeparamname")||!1,dragHandle:n(this).data("draghandle")||null})}))})),jQuery.tableDnD={currentTable:null,dragObject:null,mouseOffset:null,oldX:0,oldY:0,build:function(t){return this.each((function(){this.tableDnDConfig=n.extend({onDragStyle:null,onDropStyle:null,onDragClass:"tDnD_whileDrag",onDrop:null,onDragStart:null,onDragStop:null,scrollAmount:5,sensitivity:10,hierarchyLevel:0,indentArtifact:'<div class="indent">&nbsp;</div>',autoWidthAdjust:!0,autoCleanRelations:!0,jsonPretifySeparator:"\t",serializeRegexp:/[^\-]*$/,serializeParamName:!1,dragHandle:null},t||{}),n.tableDnD.makeDraggable(this),this.tableDnDConfig.hierarchyLevel&&n.tableDnD.makeIndented(this)})),this},makeIndented:function(t){var e,o,i=t.tableDnDConfig,r=t.rows,a=n(r).first().find("td:first")[0],s=0,l=0;if(n(t).hasClass("indtd"))return null;o=n(t).addClass("indtd").attr("style"),n(t).css({whiteSpace:"nowrap"});for(var c=0;c<r.length;c++)l<n(r[c]).find("td:first").text().length&&(l=n(r[c]).find("td:first").text().length,e=c);for(n(a).css({width:"auto"}),c=0;c<i.hierarchyLevel;c++)n(r[e]).find("td:first").prepend(i.indentArtifact);for(a&&n(a).css({width:a.offsetWidth}),o&&n(t).css(o),c=0;c<i.hierarchyLevel;c++)n(r[e]).find("td:first").children(":first").remove();return i.hierarchyLevel&&n(r).each((function(){(s=n(this).data("level")||0)<=i.hierarchyLevel&&n(this).data("level",s)||n(this).data("level",0);for(var t=0;t<n(this).data("level");t++)n(this).find("td:first").prepend(i.indentArtifact)})),this},makeDraggable:function(t){var e=t.tableDnDConfig;e.dragHandle&&n(e.dragHandle,t).each((function(){n(this).bind(r,(function(o){return n.tableDnD.initialiseDrag(n(this).parents("tr")[0],t,this,o,e),!1}))}))||n(t.rows).each((function(){n(this).hasClass("nodrag")?n(this).css("cursor",""):n(this).bind(r,(function(o){if("TD"===o.target.tagName)return n.tableDnD.initialiseDrag(this,t,this,o,e),!1})).css("cursor","move")}))},currentOrder:function(){var t=this.currentTable.rows;return n.map(t,(function(t){return(n(t).data("level")+t.id).replace(/\s/g,"")})).join("")},initialiseDrag:function(t,e,o,r,l){this.dragObject=t,this.currentTable=e,this.mouseOffset=this.getMouseOffset(o,r),this.originalOrder=this.currentOrder(),n(i).bind(a,this.mousemove).bind(s,this.mouseup),l.onDragStart&&l.onDragStart(e,o)},updateTables:function(){this.each((function(){this.tableDnDConfig&&n.tableDnD.makeDraggable(this)}))},mouseCoords:function(t){return t.originalEvent.changedTouches?{x:t.originalEvent.changedTouches[0].clientX,y:t.originalEvent.changedTouches[0].clientY}:t.pageX||t.pageY?{x:t.pageX,y:t.pageY}:{x:t.clientX+i.body.scrollLeft-i.body.clientLeft,y:t.clientY+i.body.scrollTop-i.body.clientTop}},getMouseOffset:function(t,e){var n,i;return e=e||o.event,i=this.getPosition(t),{x:(n=this.mouseCoords(e)).x-i.x,y:n.y-i.y}},getPosition:function(t){for(var e=0,n=0;t.offsetParent;)e+=t.offsetLeft,n+=t.offsetTop,t=t.offsetParent;return{x:e+=t.offsetLeft,y:n+=t.offsetTop}},autoScroll:function(t){var e=this.currentTable.tableDnDConfig,n=o.pageYOffset,r=o.innerHeight?o.innerHeight:i.documentElement.clientHeight?i.documentElement.clientHeight:i.body.clientHeight;i.all&&(void 0!==i.compatMode&&"BackCompat"!==i.compatMode?n=i.documentElement.scrollTop:void 0!==i.body&&(n=i.body.scrollTop)),t.y-n<e.scrollAmount&&o.scrollBy(0,-e.scrollAmount)||r-(t.y-n)<e.scrollAmount&&o.scrollBy(0,e.scrollAmount)},moveVerticle:function(t,e){0!==t.vertical&&e&&this.dragObject!==e&&this.dragObject.parentNode===e.parentNode&&(0>t.vertical&&this.dragObject.parentNode.insertBefore(this.dragObject,e.nextSibling)||0<t.vertical&&this.dragObject.parentNode.insertBefore(this.dragObject,e))},moveHorizontal:function(t,e){var o,i=this.currentTable.tableDnDConfig;if(!i.hierarchyLevel||0===t.horizontal||!e||this.dragObject!==e)return null;o=n(e).data("level"),0<t.horizontal&&o>0&&n(e).find("td:first").children(":first").remove()&&n(e).data("level",--o),0>t.horizontal&&o<i.hierarchyLevel&&n(e).prev().data("level")>=o&&n(e).children(":first").prepend(i.indentArtifact)&&n(e).data("level",++o)},mousemove:function(t){var e,o,i,r,a,s=n(n.tableDnD.dragObject),l=n.tableDnD.currentTable.tableDnDConfig;return t&&t.preventDefault(),!!n.tableDnD.dragObject&&("touchmove"===t.type&&event.preventDefault(),l.onDragClass&&s.addClass(l.onDragClass)||s.css(l.onDragStyle),r=(o=n.tableDnD.mouseCoords(t)).x-n.tableDnD.mouseOffset.x,a=o.y-n.tableDnD.mouseOffset.y,n.tableDnD.autoScroll(o),e=n.tableDnD.findDropTargetRow(s,a),i=n.tableDnD.findDragDirection(r,a),n.tableDnD.moveVerticle(i,e),n.tableDnD.moveHorizontal(i,e),!1)},findDragDirection:function(t,e){var n=this.currentTable.tableDnDConfig.sensitivity,o=this.oldX,i=this.oldY,r={horizontal:t>=o-n&&t<=o+n?0:t>o?-1:1,vertical:e>=i-n&&e<=i+n?0:e>i?-1:1};return 0!==r.horizontal&&(this.oldX=t),0!==r.vertical&&(this.oldY=e),r},findDropTargetRow:function(t,e){for(var o=0,i=this.currentTable.rows,r=this.currentTable.tableDnDConfig,a=0,s=null,l=0;l<i.length;l++)if(s=i[l],a=this.getPosition(s).y,o=parseInt(s.offsetHeight)/2,0===s.offsetHeight&&(a=this.getPosition(s.firstChild).y,o=parseInt(s.firstChild.offsetHeight)/2),e>a-o&&e<a+o)return t.is(s)||r.onAllowDrop&&!r.onAllowDrop(t,s)||n(s).hasClass("nodrop")?null:s;return null},processMouseup:function(){if(!this.currentTable||!this.dragObject)return null;var t=this.currentTable.tableDnDConfig,e=this.dragObject,o=0,r=0;n(i).unbind(a,this.mousemove).unbind(s,this.mouseup),t.hierarchyLevel&&t.autoCleanRelations&&n(this.currentTable.rows).first().find("td:first").children().each((function(){(r=n(this).parents("tr:first").data("level"))&&n(this).parents("tr:first").data("level",--r)&&n(this).remove()}))&&t.hierarchyLevel>1&&n(this.currentTable.rows).each((function(){if((r=n(this).data("level"))>1)for(o=n(this).prev().data("level");r>o+1;)n(this).find("td:first").children(":first").remove(),n(this).data("level",--r)})),t.onDragClass&&n(e).removeClass(t.onDragClass)||n(e).css(t.onDropStyle),this.dragObject=null,t.onDrop&&this.originalOrder!==this.currentOrder()&&n(e).hide().fadeIn("fast")&&t.onDrop(this.currentTable,e),t.onDragStop&&t.onDragStop(this.currentTable,e),this.currentTable=null},mouseup:function(t){return t&&t.preventDefault(),n.tableDnD.processMouseup(),!1},jsonize:function(t){var e=this.currentTable;return t?JSON.stringify(this.tableData(e),null,e.tableDnDConfig.jsonPretifySeparator):JSON.stringify(this.tableData(e))},serialize:function(){return n.param(this.tableData(this.currentTable))},serializeTable:function(t){for(var e="",n=t.tableDnDConfig.serializeParamName||t.id,o=t.rows,i=0;i<o.length;i++){e.length>0&&(e+="&");var r=o[i].id;r&&t.tableDnDConfig&&t.tableDnDConfig.serializeRegexp&&(e+=n+"[]="+(r=r.match(t.tableDnDConfig.serializeRegexp)[0]))}return e},serializeTables:function(){var t=[];return n("table").each((function(){this.id&&t.push(n.param(n.tableDnD.tableData(this)))})),t.join("&")},tableData:function(t){var e,o,i,r,a=t.tableDnDConfig,s=[],l=0,c=0,d=null,u={};if(t||(t=this.currentTable),!t||!t.rows||!t.rows.length)return{error:{code:500,message:"Not a valid table."}};if(!t.id&&!a.serializeParamName)return{error:{code:500,message:"No serializable unique id provided."}};r=a.autoCleanRelations&&t.rows||n.makeArray(t.rows),e=function(t){return t&&a&&a.serializeRegexp?t.match(a.serializeRegexp)[0]:t},u[i=o=a.serializeParamName||t.id]=[],!a.autoCleanRelations&&n(r[0]).data("level")&&r.unshift({id:"undefined"});for(var h=0;h<r.length;h++)if(a.hierarchyLevel){if(0===(c=n(r[h]).data("level")||0))i=o,s=[];else if(c>l)s.push([i,l]),i=e(r[h-1].id);else if(c<l)for(var f=0;f<s.length;f++)s[f][1]===c&&(i=s[f][0]),s[f][1]>=l&&(s[f][1]=0);l=c,n.isArray(u[i])||(u[i]=[]),(d=e(r[h].id))&&u[i].push(d)}else(d=e(r[h].id))&&u[i].push(d);return u}},jQuery.fn.extend({tableDnD:n.tableDnD.build,tableDnDUpdate:n.tableDnD.updateTables,tableDnDSerialize:n.proxy(n.tableDnD.serialize,n.tableDnD),tableDnDSerializeAll:n.tableDnD.serializeTables,tableDnDData:n.proxy(n.tableDnD.tableData,n.tableDnD)})},,,,function(t,e,n){"use strict";n.r(e);
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */var o={categoryDeleteAction:".js-delete-category-row-action",customerDeleteAction:".js-delete-customer-row-action",linkRowAction:".js-link-row-action",linkRowActionClickableFirst:".js-link-row-action[data-clickable-row=1]:first",clickableTd:"td.clickable"},i={showQuery:".js-common_show_query-grid-action",exportQuery:".js-common_export_sql_manager-grid-action",showModalForm:function(t){return"#".concat(t,"_common_show_query_modal_form")},showModalGrid:function(t){return"#".concat(t,"_grid_common_show_query_modal")},modalFormSubmitBtn:".js-bulk-modal-form-submit-btn",submitModalFormBtn:".js-submit-modal-form-btn",bulkInputsBlock:function(t){return"#".concat(t)},tokenInput:function(t){return'input[name="'.concat(t,'[_token]"]')},ajaxBulkActionConfirmModal:function(t,e){return"".concat(t,"-ajax-").concat(e,"-confirm-modal")},ajaxBulkActionProgressModal:function(t,e){return"".concat(t,"-ajax-").concat(e,"-progress-modal")}},r=function(t){return"".concat(t,"-grid-confirm-modal")},a=".js-grid-table",s=".js-drag-handle",l="js-drag-handle",c=function(t){return"#".concat(t,"_grid")},d=".js-grid-panel",u=".js-grid-header",h=function(t){return".js-grid-table .js-".concat(t,"-position")},f=function(t){return".js-".concat(t,"-position:first")},p=".ps-togglable-row",m="table.table",b=".header-toolbar",g=".breadcrumb-item",v=".js-reset-search",y=".js-common_refresh_list-grid-action",w="position-row-while-drag",D=".btn-sql-submit",_=window.$,C=function(){function t(t){this.id=t,this.$container=_(c(this.id))}return t.prototype.getId=function(){return this.id},t.prototype.getContainer=function(){return this.$container},t.prototype.getHeaderContainer=function(){return this.$container.closest(d).find(u)},t.prototype.addExtension=function(t){t.extend(this)},t}();
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
function O(t){return void 0===t}
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
var T,E=window.$,L=function(){function t(t){void 0===t&&(t=void 0),this.onClick=t}return t.prototype.extend=function(t){this.initRowLinks(t),this.initConfirmableActions(t)},t.prototype.initConfirmableActions=function(t){t.getContainer().on("click",o.linkRowAction,(function(t){var e=E(t.currentTarget).data("confirm-message");e.length&&!window.confirm(e)&&t.preventDefault()}))},t.prototype.initRowLinks=function(t){var e=this.onClick;E("tr",t.getContainer()).each((function(){var t=E(this);E(o.linkRowActionClickableFirst,t).each((function(){var n=E(this),i=n.closest("td"),r=E(o.clickableTd,t).not(i),a=!1;r.addClass("cursor-pointer").mousedown((function(){E(window).mousemove((function(){a=!0,E(window).unbind("mousemove")}))})),r.mouseup((function(){var t=a;if(a=!1,E(window).unbind("mousemove"),!t){var o=n.data("confirm-message");(!o.length||window.confirm(o)&&n.attr("href"))&&(O(e)||O(n.get(0))?document.location.href=n.attr("href"):e(n.get(0)))}}))}))}))},t}(),j=function(){return(j=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},x=function(){function t(t){var e=j({id:"confirm-modal",closable:!1},t);this.buildModalContainer(e)}return t.prototype.buildModalContainer=function(t){var e=this;this.container=document.createElement("div"),this.container.classList.add("modal","fade"),this.container.id=t.id,this.dialog=document.createElement("div"),this.dialog.classList.add("modal-dialog"),t.dialogStyle&&Object.keys(t.dialogStyle).forEach((function(n){e.dialog.style[n]=t.dialogStyle[n]})),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.message=document.createElement("p"),this.message.classList.add("modal-message"),this.header=document.createElement("div"),this.header.classList.add("modal-header"),t.modalTitle&&(this.title=document.createElement("h4"),this.title.classList.add("modal-title"),this.title.innerHTML=t.modalTitle),this.closeIcon=document.createElement("button"),this.closeIcon.classList.add("close"),this.closeIcon.setAttribute("type","button"),this.closeIcon.dataset.dismiss="modal",this.closeIcon.innerHTML="×",this.body=document.createElement("div"),this.body.classList.add("modal-body","text-left","font-weight-normal"),this.title&&this.header.appendChild(this.title),this.header.appendChild(this.closeIcon),this.content.append(this.header,this.body),this.body.appendChild(this.message),this.dialog.appendChild(this.content),this.container.appendChild(this.dialog)},t}(),k=function(){function t(t){var e=j({id:"confirm-modal",closable:!1,dialogStyle:{}},t);this.initContainer(e)}return t.prototype.initContainer=function(t){this.modal||(this.modal=new x(t)),this.$modal=$(this.modal.container);var e=t.id,n=t.closable;this.$modal.modal({backdrop:!!n||"static",keyboard:void 0===n||n,show:!1}),this.$modal.on("hidden.bs.modal",(function(){var n=document.querySelector("#".concat(e));n&&n.remove(),t.closeCallback&&t.closeCallback()})),document.body.appendChild(this.modal.container)},t.prototype.setTitle=function(t){return this.modal.title||(this.modal.title=document.createElement("h4"),this.modal.title.classList.add("modal-title"),this.modal.closeIcon?this.modal.header.insertBefore(this.modal.title,this.modal.closeIcon):this.modal.header.appendChild(this.modal.title)),this.modal.title.innerHTML=t,this},t.prototype.render=function(t){return this.modal.message.innerHTML=t,this},t.prototype.show=function(){return this.$modal.modal("show"),this},t.prototype.hide=function(){var t=this;return this.$modal.modal("hide"),this.$modal.on("shown.bs.modal",(function(){t.$modal.modal("hide"),t.$modal.off("shown.bs.modal")})),this},t}(),S=(T=function(t,e){return(T=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}T(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),B=function(){return(B=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},A=function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},M=function(t){function e(e){return t.call(this,e)||this}return S(e,t),e.prototype.buildModalContainer=function(e){var n;t.prototype.buildModalContainer.call(this,e),this.message.classList.add("confirm-message"),this.message.innerHTML=e.confirmMessage,this.footer=document.createElement("div"),this.footer.classList.add("modal-footer"),this.closeButton=document.createElement("button"),this.closeButton.setAttribute("type","button"),this.closeButton.classList.add("btn","btn-outline-secondary","btn-lg"),this.closeButton.dataset.dismiss="modal",this.closeButton.innerHTML=e.closeButtonLabel,this.confirmButton=document.createElement("button"),this.confirmButton.setAttribute("type","button"),this.confirmButton.classList.add("btn",e.confirmButtonClass,"btn-lg","btn-confirm-submit"),this.confirmButton.dataset.dismiss="modal",this.confirmButton.innerHTML=e.confirmButtonLabel,(n=this.footer).append.apply(n,A(A([this.closeButton],e.customButtons,!1),[this.confirmButton],!1)),this.content.append(this.footer)},e}(x),P=function(t){function e(e,n,o){var i,r;r=O(e.confirmCallback)?O(n)?function(){console.error("No confirm callback provided for ConfirmModal component.")}:n:e.confirmCallback;var a=B({id:"confirm-modal",confirmMessage:"Are you sure?",closeButtonLabel:"Close",confirmButtonLabel:"Accept",confirmButtonClass:"btn-primary",customButtons:[],closable:!1,modalTitle:e.confirmTitle,dialogStyle:{},confirmCallback:r,closeCallback:null!==(i=e.closeCallback)&&void 0!==i?i:o},e);return t.call(this,a)||this}return S(e,t),e.prototype.initContainer=function(e){this.modal=new M(e),this.modal.confirmButton.addEventListener("click",e.confirmCallback),t.prototype.initContainer.call(this,e)},e}(k),z=n(4),R=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),I=function(t){function e(n,o){void 0===o&&(o={});var i=t.call(this,e.parentWindowEvent)||this;return i.eventName=n,i.eventParameters=o,i}return R(e,t),Object.defineProperty(e.prototype,"name",{get:function(){return this.eventName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parameters",{get:function(){return this.eventParameters},enumerable:!1,configurable:!0}),e.parentWindowEvent="IframeClientEvent",e}(Event),H=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),F=function(){return(F=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},N=function(t){function e(e){return t.call(this,e)||this}return H(e,t),e.prototype.buildModalContainer=function(e){t.prototype.buildModalContainer.call(this,e),this.container.classList.add("modal-iframe"),this.message.classList.add("d-none"),this.iframe=document.createElement("iframe"),this.iframe.frameBorder="0",this.iframe.scrolling="no",this.iframe.width="100%",this.iframe.setAttribute("name","".concat(e.id,"-iframe")),e.autoSize||(this.iframe.height="100%"),this.loader=document.createElement("div"),this.loader.classList.add("modal-iframe-loader"),this.spinner=document.createElement("div"),this.spinner.classList.add("spinner"),this.loader.appendChild(this.spinner),this.body.append(this.loader,this.iframe),O(e.closeButtonLabel)&&O(e.confirmButtonLabel)||(this.footer=document.createElement("div"),this.footer.classList.add("modal-footer"),O(e.closeButtonLabel)||(this.closeButton=document.createElement("button"),this.closeButton.setAttribute("type","button"),this.closeButton.classList.add("btn","btn-outline-secondary","btn-lg"),this.closeButton.dataset.dismiss="modal",this.closeButton.innerHTML=e.closeButtonLabel,this.footer.append(this.closeButton)),O(e.confirmButtonLabel)||(this.confirmButton=document.createElement("button"),this.confirmButton.setAttribute("type","button"),this.confirmButton.classList.add("btn","btn-primary","btn-lg","btn-confirm-submit"),e.closeOnConfirm&&(this.confirmButton.dataset.dismiss="modal"),this.confirmButton.innerHTML=e.confirmButtonLabel,this.footer.append(this.confirmButton)),this.content.append(this.footer))},e}(x),W=function(t){function e(e){var n=F({id:"iframe-modal",closable:!1,autoSize:!0,autoSizeContainer:"body",closeOnConfirm:!0,autoScrollUp:!0},e);return t.call(this,n)||this}return H(e,t),e.prototype.initContainer=function(e){var n=this;this.modal=new N(e),t.prototype.initContainer.call(this,e),this.autoSize=e.autoSize,this.autoSizeContainer=e.autoSizeContainer,this.modal.iframe.addEventListener("load",(function(t){n.modal.body.scroll(0,0),n.hideLoading(),e.onLoaded&&e.onLoaded(n.modal.iframe,t),n.modal.iframe.contentWindow&&(n.modal.iframe.contentWindow.addEventListener("beforeunload",(function(t){e.onUnload&&e.onUnload(n.modal.iframe,t),n.showLoading()})),n.initAutoResize())})),this.$modal.on("shown.bs.modal",(function(){n.modal.iframe.src=e.iframeUrl})),window.addEventListener(I.parentWindowEvent,(function(t){e.onIframeEvent&&e.onIframeEvent(t)})),this.modal.confirmButton&&e.confirmCallback&&this.modal.confirmButton.addEventListener("click",(function(t){e.confirmCallback&&e.confirmCallback(n.modal.iframe,t)}))},e.prototype.render=function(t,e){return void 0===e&&(e=!0),this.modal.message.innerHTML=t,this.modal.message.classList.remove("d-none"),e&&this.hideIframe(),this.autoResize(),this.hideLoading(),this},e.prototype.showLoading=function(){var t=this.getOuterHeight(this.modal.body),e=this.getOuterWidth(this.modal.body);return this.modal.loader.style.height="".concat(t,"px"),this.modal.loader.style.width="".concat(e,"px"),this.modal.loader.classList.remove("d-none"),this.modal.iframe.classList.remove("invisible"),this.modal.iframe.classList.add("invisible"),this},e.prototype.hideLoading=function(){return this.modal.iframe.classList.remove("invisible"),this.modal.iframe.classList.add("visible"),this.modal.loader.classList.add("d-none"),this},e.prototype.hide=function(){return t.prototype.hide.call(this),this.cleanResizeObserver(),this},e.prototype.hideIframe=function(){this.modal.iframe.classList.add("d-none")},e.prototype.getResizableContainer=function(){return this.autoSize&&this.modal.iframe.contentWindow?this.modal.iframe.contentWindow.document.querySelector(this.autoSizeContainer):null},e.prototype.initAutoResize=function(){var t=this,e=this.getResizableContainer();e&&(this.cleanResizeObserver(),this.resizeObserver=new z.a((function(){t.autoResize()})),this.resizeObserver.observe(e)),this.autoResize()},e.prototype.cleanResizeObserver=function(){this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null)},e.prototype.autoResize=function(){var t=this.getResizableContainer();if(t){var e=t.scrollHeight,n=this.getOuterHeight(this.modal.message)+e;n&&(this.modal.iframe.style.height="".concat(n,"px"))}},e.prototype.getOuterHeight=function(t){if(!t.offsetHeight)return 0;var e=t.offsetHeight,n=getComputedStyle(t);return e+=parseInt(n.marginTop,10)+parseInt(n.marginBottom,10)},e.prototype.getOuterWidth=function(t){if(!t.offsetWidth)return 0;var e=t.offsetWidth,n=getComputedStyle(t);return e+=parseInt(n.marginLeft,10)+parseInt(n.marginRight,10)},e}(k),q=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),G=function(){return(G=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},U=(function(t){function e(e){var n=this,o=G({iframeUrl:e.formUrl,onLoaded:function(t,o){var i,r;n.onIframeLoaded(t,o,e.onFormLoaded,null!==(i=e.cancelButtonSelector)&&void 0!==i?i:".cancel-btn",null!==(r=e.formSelector)&&void 0!==r?r:"form")},confirmCallback:function(t,o){var i;n.onConfirmCallback(t,o,e.formConfirmCallback,null!==(i=e.formSelector)&&void 0!==i?i:"form")}},e);return n=t.call(this,o)||this}q(e,t),e.prototype.onIframeLoaded=function(t,e,n,o,i){var r,a=this;if(n){var s=this.getForm(t,i);if(s)s.querySelectorAll(o).forEach((function(t){t.addEventListener("click",(function(){a.hide()}))})),n(s,new FormData(s),null!==(r=s.dataset)&&void 0!==r?r:null,e)}},e.prototype.onConfirmCallback=function(t,e,n,o){if(n){var i=this.getForm(t,o);i&&n(i,t,e)}},e.prototype.getForm=function(t,e){return t.contentWindow?t.contentWindow.document.querySelector(e):null}}(W),window.$),Q=function(){function t(){}return t.prototype.extend=function(t){var e=this;t.getContainer().on("click",".js-submit-row-action",(function(n){n.preventDefault();var o=U(n.currentTarget),i=o.data("confirmMessage"),r=o.data("title"),a=o.data("method");if(r)e.showConfirmModal(o,t,i,r,a);else{if(i.length&&!window.confirm(i))return;e.postForm(o,a)}}))},t.prototype.postForm=function(t,e){var n=["GET","POST"].includes(e),o=U("<form>",{action:t.data("url"),method:n?e:"POST"}).appendTo("body");n||o.append(U("<input>",{type:"hidden",name:"_method",value:e})),o.submit()},t.prototype.showConfirmModal=function(t,e,n,o,i){var a=this,s=t.data("confirmButtonLabel"),l=t.data("closeButtonLabel"),c=t.data("confirmButtonClass");new P({id:r(e.getId()),confirmTitle:o,confirmMessage:n,confirmButtonLabel:s,closeButtonLabel:l,confirmButtonClass:c},(function(){return a.postForm(t,i)})).show()},t}(),V=window.$,Y=function(){function t(t){var e;this.selector=".ps-sortable-column",this.idTable=null!==(e=t.attr("id"))&&void 0!==e?e:"",this.columns=t.find(this.selector)}return t.prototype.attach=function(){var t=this;this.columns.on("click",(function(e){var n=V(e.delegateTarget);t.sortByColumn(n,t.getToggledSortDirection(n))}))},t.prototype.sortBy=function(t,e){if(!this.columns.is('[data-sort-col-name="'.concat(t,'"]')))throw new Error('Cannot sort by "'.concat(t,'": invalid column'));this.sortByColumn(this.columns,e)},t.prototype.sortByColumn=function(t,e){window.location.href=this.getUrl(t.data("sortColName"),"desc"===e?"desc":"asc",t.data("sortPrefix"))},t.prototype.getToggledSortDirection=function(t){return"asc"===t.data("sortDirection")?"desc":"asc"},t.prototype.getUrl=function(t,e,n){var o=new URL(window.location.href),i=o.searchParams;return n?(i.set("".concat(n,"[orderBy]"),t),i.set("".concat(n,"[sortOrder]"),e)):(i.set("orderBy",t),i.set("sortOrder",e)),o.hash=this.idTable,o.toString()},t}(),X=function(){function t(){}return t.prototype.extend=function(t){var e=t.getContainer().find(m);new Y(e).attach()},t}();
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
const{$:J}=window;var K=function(t,e){J.post(t).then(()=>window.location.assign(e))},Z=window.$,tt=function(){function t(){}return t.prototype.extend=function(t){t.getContainer().on("click",v,(function(t){K(Z(t.currentTarget).data("url"),Z(t.currentTarget).data("redirect"))}))},t}(),et=function(){function t(){}return t.prototype.extend=function(t){t.getHeaderContainer().on("click",y,(function(){window.location.reload()}))},t}(),nt=window.$,ot=function(){function t(){}return t.prototype.extend=function(t){var e=this;t.getContainer().find(m).find(p).on("click",(function(t){t.preventDefault(),e.toggleValue(nt(t.delegateTarget))}))},t.prototype.toggleValue=function(t){var e=t.data("toggleUrl");this.submitAsForm(e)},t.prototype.submitAsForm=function(t){nt("<form>",{action:t,method:"POST"}).appendTo("body").submit()},t}(),it=window.$,rt=function(){function t(){}return t.prototype.extend=function(t){var e=this;t.getHeaderContainer().on("click",i.showQuery,(function(){return e.onShowSqlQueryClick(t)})),t.getHeaderContainer().on("click",i.exportQuery,(function(){return e.onExportSqlManagerClick(t)}))},t.prototype.onShowSqlQueryClick=function(t){var e=it(i.showModalForm(t.getId()));this.fillExportForm(e,t);var n=it(i.showModalGrid(t.getId()));n.modal("show"),n.on("click",D,(function(){return e.submit()}))},t.prototype.onExportSqlManagerClick=function(t){var e=it(i.showModalForm(t.getId()));this.fillExportForm(e,t),e.submit()},t.prototype.fillExportForm=function(t,e){var n=e.getContainer().find(a).data("query");t.find('textarea[name="sql"]').val(n),t.find('input[name="name"]').val(this.getNameFromBreadcrumb())},t.prototype.getNameFromBreadcrumb=function(){var t=it(b).find(g),e="";return t.each((function(t,n){var o=it(n),i=o.find("a").length>0?o.find("a").text():o.text();e.length>0&&(e=e.concat(" > ")),e=e.concat(i)})),e},t}(),at=n(0),st=(n(6),window.$),lt=function(){function t(t){this.grid=t}return t.prototype.extend=function(t){var e=this;this.grid=t,this.addIdsToGridTableRows(),t.getContainer().find(a).tableDnD({onDragClass:w,dragHandle:s,onDrop:function(t,n){return e.handlePositionChange(n)}}),t.getContainer().find(".js-drag-handle").hover((function(){st(this).closest("tr").addClass("hover")}),(function(){st(this).closest("tr").removeClass("hover")})),this.setReorderButtonLabel(),this.getReorderButton().on("click",(function(t){return e.oncClickReorderButton(t)}))},t.prototype.handlePositionChange=function(t){var e=st(t).find(f(this.grid.getId())),n=e.data("update-url"),o=e.data("update-method"),i={positions:this.getRowsPositions()};this.updatePosition(n,i,o)},t.prototype.getRowsPositions=function(){for(var t,e=JSON.parse(st.tableDnD.jsonize())["".concat(this.grid.getId(),"_grid_table")],n=[],o=0;o<e.length;o+=1)t=this.grid.getContainer().find("#".concat(e[o])),n.push({rowMarker:e[o],offset:t.data("dragAndDropOffset")});return this.computeMappingBetweenOldAndNewPositions(n)},t.prototype.addIdsToGridTableRows=function(){var t=0;this.grid.getContainer().find(h(this.grid.getId())).each((function(e,n){var o=st(n),i=o.data("id"),r=o.data("position"),a="row_".concat(i,"_").concat(r);o.closest("tr").attr("id",a),o.closest("td").addClass(l),o.closest("tr").data("dragAndDropOffset",t),t+=1}))},t.prototype.updatePosition=function(t,e,n){for(var o,i=["GET","POST"].includes(n),r=st("<form>",{action:t,method:i?n:"POST"}).appendTo("body"),a=e.positions.length,s=0;s<a;s+=1)o=e.positions[s],r.append(st("<input>",{type:"hidden",name:"positions[".concat(s,"][rowId]"),value:o.rowId}),st("<input>",{type:"hidden",name:"positions[".concat(s,"][oldPosition]"),value:o.oldPosition}),st("<input>",{type:"hidden",name:"positions[".concat(s,"][newPosition]"),value:o.newPosition}));i||r.append(st("<input>",{type:"hidden",name:"_method",value:n})),r.submit()},t.prototype.computeMappingBetweenOldAndNewPositions=function(t){for(var e,n=/^row_(?<rowId>\d+)_(?<oldPosition>\d+)$/,o=[],i=0;i<t.length;i+=1){var r=n.exec(t[i].rowMarker);if(r&&!O(r.groups)&&!O(r.groups.rowId)&&!O(r.groups.oldPosition)){var a=parseInt(null===(e=null==r?void 0:r.groups)||void 0===e?void 0:e.oldPosition,10);o[i]={rowId:r.groups.rowId,oldPosition:a,newPosition:a}}for(var s=0;s<t.length;s+=1)O(t[s])||O(t[s].offset)||O(o[t[s].offset])||O(o[s])||(o[t[s].offset].newPosition=o[s].oldPosition)}return o},t.prototype.isPositionsReorderActive=function(){return this.grid.getContainer().find('.ps-sortable-column[data-sort-col-name="position"]').first().data("sort-is-current")},t.prototype.getReorderButton=function(){return this.grid.getContainer().find(".js-btn-reorder-positions").first()},t.prototype.setReorderButtonLabel=function(){var t=this.getReorderButton(),e=this.isPositionsReorderActive()?t.data("label-save"):t.data("label-reorder");t.html(e)},t.prototype.oncClickReorderButton=function(t){t.preventDefault(),this.isPositionsReorderActive()?this.grid.getContainer().find(".ps-sortable-column").first().click():this.grid.getContainer().find('.ps-sortable-column[data-sort-col-name="position"]').first().click()},t}();
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
/**
 * Copyright since 2007 Carmine Di Gruttola
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 *  @author    cdigruttola <c.digruttola@hotmail.it>
 *  @copyright Copyright since 2007 Carmine Di Gruttola
 *  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *
 */
const{$:ct}=window;ct(()=>{const t=new C("is_productslider");t.addExtension(new X),t.addExtension(new L),t.addExtension(new Q),t.addExtension(new tt),t.addExtension(new et),t.addExtension(new ot),t.addExtension(new rt),t.addExtension(new lt(t)),new at.a})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,